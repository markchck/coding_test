두용액 2470 놓아준다..
그래도 알아낸것. 두 수 의 합을 구하는 문제는 투포인터로 푸는게 더 빠르고 쉽네

1. 투포인터 기법
2. 왜 최대, 최소 구하라는 문제에서 엄청 큰수 엄청 작은 수를 셋팅하고 시작하는지?

1. 투포인터 
- 왼쪽 오른쪽 순번을 가리키는 포인터를 만들고  lp, rp
- arr[lp] + arr[rp] 가 목표한 값이랑 같으면 lp, rp출력
- 크면, rp를 -1해줘(바로 왼쪽 것 보라는 소리)
- 작으면, lp를 +1해줘 
- lp < rp가 아니게 되면 루프문 탈출
- 이건 시간 복잡도 n이다. 왜냐 배열의 길이만큼만 포인터가 +1 또는 -1씩 이동할테니까

2. 왜 최대, 최소 구하라는 문제에서 엄청 큰수 엄청 작은 수를 셋팅하고 시작하는지?
- 결론부터 말하면 메모리를 절약하려고
- 최댓값, 최솟값 구할 때 이렇게 엄청 큰 수, 엄청 작은 변수를 설정해놓고 반복문을 돌면서 더 작은 값, 더 큰 값이 등장하면 변수를 갱신하면서 반복문을 돌다가 마지막에 그 변수를 print하는 로직이 많이 들어간다.
- 너라면 아마 abs(arr[i] + arr[res - 1]) 값들을 전부 어떤 배열 x를 하나 새로 선언해서 다 append시켜놓고 최종적으로 print( min(x) ) 이런 식으로 답을 구했겠지. 
- 물론 틀린거는 아님. 메모리랑 시간이 더 들어갈 뿐..
- 엄청 큰 수 작은 수를 best_sum이라고 설정하면 best_sum이 무한대였다가 무한대보다 작은 값이 나오면 갱신됨 10이라고 치자
- 그럼 다음 루프에서는 10보다 작은 값이 나와야 갱신될 수 있고
- 루프 끝나는 위치에 print(best_sum)하면 난 무조건 가장 작은 값을 얻을 수 있는거다.(다음 루프에서 10보다 작은 값이 나오면 그걸 출력하고 안나오면 10을 출력하겠지)
